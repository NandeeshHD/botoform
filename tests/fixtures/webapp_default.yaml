# Avoid repeating yourself, include other YAML files here.
includes:
  # route_tables: /path/to/common_route_tables_layout.yaml
  # subnets: /path/to/webapp_subnets_formation.yaml

  # import the amis stanza from amis.yaml.
  amis: nested/amis.yaml

# This is an example route_tables schema.
route_tables:
  
  # private network without a default route to the Internet.
  private:
    main: true

  # public network with a default route to the Internet.
  public:
    routes:
      - ['0.0.0.0/0', 'internet_gateway']

# This is an example of a 4 subnet schema.
# Each subnet has a size of 27 which is a /27 CIDR (32 addresses).
# Two are attached to the private route_table, and two to the public.
# We round robin AZ letters if availability_zone is not defined.
# Instances will launch into subnet with public IPs, if public is True.
subnets:

  private-1: 
    size: 27
    route_table: private
    description: private subnet 1
    # availability_zone: a

  private-2: 
    size: 27
    route_table: private
    description: private subnet 2
    # availability_zone: b

  public-1: 
    size: 27
    route_table: public
    description: public subnet 1
    #public: True

  public-2: 
    size: 27
    route_table: public
    description: public subnet 2
    #public: True

# This is an example of how to create VPC Endpoints.
# This is optional, this allows private subnets to reach S3.
endpoints:
  - private

# This is an example of how to create additional VPC ssh key pairs.
# This is optional, we always create a default key pair.
key_pairs:
  - door

# security groups and rules. 
# we reference these security_groups by name in:
# role_instances, load_balancers, cache_clusters, db_instances, and more.
security_groups:
  web-elb:
    - ['0.0.0.0/0', 'tcp',   80]
  web:
    - ['web-elb',   'tcp',   80]
    - ['door',      'tcp',   22]
    - ['web',      '-1',   all]
  db:
    - ['web',       'tcp', 5432]
    - ['door',      'tcp',   22]
  door:
    - ['0.0.0.0/0', 'tcp',   22]

# define a public ELB for webapp nodes.
load_balancers:

  # The Name tag of the this ELB will end up as webapp01-web-elb:
  web-elb:
    register_instances: web
    internal: false
    security_groups: ['web-elb']
    subnets: ['public-1', 'public-2']
    listeners:
      - [80, 80, 'tcp']

# define instance roles to create.
instance_roles:

#  # define how an instance in the web role should look.
#  web:
#    description: web nodes run Nginx/uWSGI/Pyramid on port 80
#    instance_type: t2.micro
#    ami: 'ubuntu-14.04-lts-hvm'
#    count: 2
#    security_groups: ['web']
#    subnets: ['private-1', 'private-2']
#    root_volume:
#      size: 30
#      ssd: true
#    block_devices:
#      count: 2
#      size: 60
#      start_device: /dev/sdf
#
#  # define how an instance in the db role should look.
#  db:
#    description: db nodes run PostgreSQL on port 5432
#    instance_type: t2.micro
#    ami: 'ubuntu-14.04-lts-hvm'
#    count: 1
#    security_groups: ['db']
#    subnets: ['private-1', 'private-2']
#    root_volume:
#      size: 30
#      ssd: true

  # define how an instance in the door role should look.
  door:
    description: door nodes run ssh on port 22
    instance_type: t2.micro
    ami: 'ubuntu-14.04-lts-hvm'
    count: 1
    security_groups: ['door']
    subnets: ['public-1', 'public-2']
    key_pair: door
    eip: True
    root_volume:
      size: 30
      ssd: true

